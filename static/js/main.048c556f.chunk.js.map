{"version":3,"sources":["hooks/useLocalStorageState.js","hooks/useInputState.js","TodoForm.js","hooks/useToggleState.js","EditTodoForm.js","Todo.js","TodoList.js","TodoApp.js","hooks/useTodoState.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorageState","key","defaultVal","useState","val","JSON","parse","window","localStorage","getItem","String","e","state","setState","useEffect","setItem","stringify","initialVal","value","setValue","target","TodoForm","addTodo","useInputState","handleChange","reset","Paper","style","margin","padding","onSubmit","preventDefault","TextField","onChange","label","fullWidth","useToggleState","toggle","EditTodoForm","task","id","editTodo","marginLeft","width","Todo","completed","removeTodo","toggleTodo","isEditing","ListItem","height","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","props","todos","length","List","uuid","map","todo","i","Divider","TodoApp","initialTodos","setTodos","newTodoText","todoId","updatedTodo","filter","newTask","useTodoState","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.048c556f.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction useLocalStorageState(key, defaultVal) {\r\n  const [state, setState] = useState(() => {\r\n    let val;\r\n    try {\r\n      val = JSON.parse(\r\n        window.localStorage.getItem(\"todos\") || String(defaultVal)\r\n      );\r\n    } catch (e) {\r\n      val = defaultVal;\r\n    }\r\n    return val;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  });\r\n\r\n  return [state, setState];\r\n}\r\n\r\nexport default useLocalStorageState;\r\n","import { useState } from \"react\";\r\n\r\nexport default initialVal => {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n  return [value, handleChange, reset];\r\n};\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState\";\r\n\r\nexport default function TodoForm({ addTodo }) {\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n  return (\r\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          addTodo(value);\r\n          reset();\r\n        }}\r\n      >\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          margin=\"normal\"\r\n          label=\"Add New Todo\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n","import { useState } from 'react'\r\n\r\nfunction useToggleState (initialVal=false) {\r\n  const [state,setState] = useState(initialVal);\r\n  const toggle = () => {\r\n    setState(!state)\r\n  }\r\n  return[state, toggle]\r\n}\r\n\r\nexport default useToggleState","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState\";\r\n\r\nfunction EditTodoForm({task, id, editTodo, toggle}) {\r\n  const [value, handleChange, reset] = useInputState(task);\r\n  return (\r\n    <form\r\n      onSubmit={e => {\r\n        e.preventDefault();\r\n        editTodo(id,value);\r\n        reset();\r\n        toggle();\r\n      }}\r\n      style={{marginLeft:\"1rem\", width:\"200%\"}}\r\n    >\r\n      <TextField\r\n        margin=\"normal\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default EditTodoForm;\r\n","import React from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport CheckBox from \"@material-ui/core/CheckBox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport uuid from \"uuid/v4\"\r\n\r\nfunction Todo({ task, completed, removeTodo, id, toggleTodo, editTodo }) {\r\n  const [isEditing, toggle] = useToggleState(false);\r\n  return (\r\n    <ListItem style={{height:\"64px\"}} >\r\n      {isEditing ? (\r\n        <h1>\r\n          <EditTodoForm id={id} editTodo={editTodo} task={task} toggle={toggle}/>\r\n        </h1>\r\n      ) : (\r\n        <>\r\n          <CheckBox\r\n            tabIndex={-1}\r\n            checked={completed}\r\n            onClick={() => toggleTodo(id)}\r\n          />\r\n          <ListItemText\r\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\r\n          >\r\n            {task}\r\n          </ListItemText>\r\n          <ListItemSecondaryAction>\r\n            <IconButton aria-label=\"Edit\" onClick={toggle}>\r\n              <EditIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"Delete\" onClick={() => removeTodo(id)}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </>\r\n      )}\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Todo from \"./Todo\";\r\nimport uuid from \"uuid/v4\"\r\n\r\nfunction TodoList(props) {\r\n  if (props.todos.length)\r\n    return (\r\n      <Paper>\r\n        <List key={uuid()}>\r\n          {props.todos.map((todo, i) => (\r\n            <>\r\n              <Todo\r\n                {...todo}\r\n                key={todo.id}\r\n                removeTodo={props.removeTodo}\r\n                toggleTodo={props.toggleTodo}\r\n                editTodo={props.editTodo}\r\n              />\r\n              {i < props.todos.length - 1 && <Divider />}\r\n            </>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  return null\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport useTodoState from \"./hooks/useTodoState\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/ToolBar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport TodoList from \"./TodoList\";\r\n\r\nfunction TodoApp() {\r\n  const initialTodos = [{ id: 1, task: \"Clean FishTank\", completed: false }]\r\n  const { todos, addTodo, removeTodo, toggleTodo, editTodo } = useTodoState(\r\n    initialTodos\r\n  );\r\n  // { id: 1, task: \"Clean FishTank\", completed: false },\r\n  // { id: 2, task: \"Wash Car\", completed: true },\r\n  // { id: 3, task: \"Buy Groceries\", completed: false }\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        padding: 0,\r\n        margin: 0,\r\n        height: \"100vh\",\r\n        backgroundColor: \"#fafafa\"\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\r\n        <Toolbar>\r\n          <Typography color=\"inherit\">TODOS WITH HOOKS</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodoForm addTodo={addTodo} />\r\n          <TodoList\r\n            todos={todos}\r\n            removeTodo={removeTodo}\r\n            toggleTodo={toggleTodo}\r\n            editTodo={editTodo}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default TodoApp;\r\n","import useLocalStorageState from \"./useLocalStorageState\"\r\nimport uuid from 'uuid/v4'\r\nexport default initialTodos => {\r\n  const [todos, setTodos] = useLocalStorageState(\"todos\", initialTodos);\r\n\r\n  return {\r\n    todos,\r\n    addTodo: newTodoText => {\r\n      setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\r\n    },\r\n    removeTodo: todoId => {\r\n      const updatedTodo = todos.filter(todo => todo.id !== todoId);\r\n      setTodos(updatedTodo);\r\n    },\r\n    toggleTodo: todoId => {\r\n      const updatedTodo = todos.map(todo =>\r\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n      setTodos(updatedTodo);\r\n    },\r\n    editTodo: (todoId, newTask) => {\r\n      const updatedTodo = todos.map(todo =>\r\n        todo.id === todoId ? { ...todo, task: newTask } : todo\r\n      );\r\n      setTodos(updatedTodo);\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\nimport TodoApp from './TodoApp'\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}